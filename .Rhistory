names(pBVvsSUCRA_AO) <- as.character(c(continuousIDs,binaryIDs))
pBVvsSUCRA_AO <- Filter(Negate(anyNA), pBVvsSUCRA_AO)   ## exclude any NAs
head(pBVvsSUCRA_s)
head(pBVvsSUCRA_k)
head(pBVvsSUCRA_AP)
head(pBVvsSUCRA_AO)
res_pBVvsSUCRA_s <- paste0(summary(pBVvsSUCRA_s, digits = 3)["Median"], " (", summary(pBVvsSUCRA_s, digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_s, digits = 3)["3rd Qu."], ")")
res_pBVvsSUCRA_k <-paste0(summary(pBVvsSUCRA_k, digits = 3)["Median"], " (", summary(pBVvsSUCRA_k, digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_k, digits = 3)["3rd Qu."], ")")
res_pBVvsSUCRA_AP <-paste0(summary(pBVvsSUCRA_AP, digits = 3)["Median"], " (", summary(pBVvsSUCRA_AP, digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_AP, digits = 3)["3rd Qu."], ")")
res_pBVvsSUCRA_AO <-paste0(summary(pBVvsSUCRA_AO, digits = 3)["Median"], " (", summary(pBVvsSUCRA_AO, digits = 3)["1st Qu."], ", ", summary(pBVvsSUCRA_AO, digits = 3)["3rd Qu."], ")")
# save all pBV vs Avg TE in a vector separately for kendall, spearman and AP then store median and interquartile range
pBVvsAvgTE_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["pBV ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["pBV ranks","Avg TE ranks"]))
names(pBVvsAvgTE_s) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["pBV ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["pBV ranks","Avg TE ranks"]))
names(pBVvsAvgTE_k) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"pBV ranks"], con_ranks[[i]][,"Avg TE ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"pBV ranks"], bin_ranks[[i]][,"Avg TE ranks"], decreasing=F)))
names(pBVvsAvgTE_AP) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_AO <- c(sapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(con_ranks[[i]][,"pBV ranks"],con_ranks[[i]][,"Avg TE ranks"],floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
sapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(bin_ranks[[i]][,"pBV ranks"],bin_ranks[[i]][,"Avg TE ranks"],floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
names(pBVvsAvgTE_AO) <- as.character(c(continuousIDs,binaryIDs))
pBVvsAvgTE_AO <- Filter(Negate(anyNA), pBVvsAvgTE_AO)   ## exclude any NAs
head(pBVvsAvgTE_s)
head(pBVvsAvgTE_k)
head(pBVvsAvgTE_AP)
head(pBVvsAvgTE_AO)
res_pBVvsAvgTE_s <- paste0(summary(pBVvsAvgTE_s, digits = 3)["Median"], " (", summary(pBVvsAvgTE_s, digits = 3)["1st Qu."], ", ", summary(pBVvsAvgTE_s, digits = 3)["3rd Qu."], ")")
res_pBVvsAvgTE_k <-paste0(summary(pBVvsAvgTE_k, digits = 3)["Median"], " (", summary(pBVvsAvgTE_k, digits = 3)["1st Qu."], ", ", summary(pBVvsAvgTE_k, digits = 3)["3rd Qu."], ")")
res_pBVvsAvgTE_AP <-paste0(summary(pBVvsAvgTE_AP, digits = 3)["Median"], " (", summary(pBVvsAvgTE_AP, digits = 3)["1st Qu."], ", ", summary(pBVvsAvgTE_AP, digits = 3)["3rd Qu."], ")")
res_pBVvsAvgTE_AO <-paste0(summary(pBVvsAvgTE_AO, digits = 3)["Median"], " (", summary(pBVvsAvgTE_AO, digits = 3)["1st Qu."], ", ", summary(pBVvsAvgTE_AO, digits = 3)["3rd Qu."], ")")
# save all SUCRA vs Avg TE in a vector separately for kendall, spearman and AP, then store median and interquartile range
SUCRAvsAvgTE_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["SUCRA_ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["SUCRA_ranks","Avg TE ranks"]))
names(SUCRAvsAvgTE_s) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["SUCRA_ranks","Avg TE ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["SUCRA_ranks","Avg TE ranks"]))
names(SUCRAvsAvgTE_k) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"SUCRA_ranks"], con_ranks[[i]][,"Avg TE ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"SUCRA_ranks"], bin_ranks[[i]][,"Avg TE ranks"], decreasing=F)))
names(SUCRAvsAvgTE_AP) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_AO <- c(sapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(con_ranks[[i]][,"SUCRA_ranks"],con_ranks[[i]][,"Avg TE ranks"],floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
sapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(bin_ranks[[i]][,"SUCRA_ranks"],bin_ranks[[i]][,"Avg TE ranks"],floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
names(SUCRAvsAvgTE_AO) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsAvgTE_AO <- Filter(Negate(anyNA), SUCRAvsAvgTE_AO)   ## exclude any NAs
head(SUCRAvsAvgTE_s)
head(SUCRAvsAvgTE_k)
head(SUCRAvsAvgTE_AP)
head(SUCRAvsAvgTE_AO)
res_SUCRAvsAvgTE_s <- paste0(summary(SUCRAvsAvgTE_s, digits = 3)["Median"], " (", summary(SUCRAvsAvgTE_s, digits = 3)["1st Qu."], ", ", summary(SUCRAvsAvgTE_s, digits = 3)["3rd Qu."], ")")
res_SUCRAvsAvgTE_k <- paste0(summary(SUCRAvsAvgTE_k, digits = 3)["Median"], " (", summary(SUCRAvsAvgTE_k, digits = 3)["1st Qu."], ", ", summary(SUCRAvsAvgTE_k, digits = 3)["3rd Qu."], ")")
res_SUCRAvsAvgTE_AP <- paste0(summary(SUCRAvsAvgTE_AP, digits = 3)["Median"], " (", summary(SUCRAvsAvgTE_AP, digits = 3)["1st Qu."], ", ", summary(SUCRAvsAvgTE_AP, digits = 3)["3rd Qu."], ")")
res_SUCRAvsAvgTE_AO <-paste0(summary(SUCRAvsAvgTE_AO, digits = 3)["Median"], " (", summary(SUCRAvsAvgTE_AO, digits = 3)["1st Qu."], ", ", summary(SUCRAvsAvgTE_AO, digits = 3)["3rd Qu."], ")")
# save all SUCRA vs SUCRA jags in a vector separately for kendall and spearman, then store median and interquartile range
SUCRAvsSUCRAjags_s <- c(sapply(1:length(con_ranks), function(i) spearman_con[[i]]["SUCRA_ranks","SUCRAjags ranks"]),
sapply(1:length(bin_ranks), function(i) spearman_bin[[i]]["SUCRA_ranks","SUCRAjags ranks"]))
names(SUCRAvsSUCRAjags_s) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_k <- c(sapply(1:length(con_ranks), function(i) kendall_con[[i]]["SUCRA_ranks","SUCRAjags ranks"]),
sapply(1:length(bin_ranks), function(i) kendall_bin[[i]]["SUCRA_ranks","SUCRAjags ranks"]))
names(SUCRAvsSUCRAjags_k) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_AP <- c(sapply(1:length(con_ranks), function(i) tauAP_b(con_ranks[[i]][,"SUCRA_ranks"], con_ranks[[i]][,"SUCRAjags ranks"], decreasing=F)),
sapply(1:length(bin_ranks), function(i) tauAP_b(bin_ranks[[i]][,"SUCRA_ranks"], bin_ranks[[i]][,"SUCRAjags ranks"], decreasing=F)))
names(SUCRAvsSUCRAjags_AP) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_AO <- c(sapply(1:length(con_ranks), function(i) if(as.numeric(continuous_rm[[i]]["no. treatments"])>5)
{averageoverlap(con_ranks[[i]][,"SUCRA_ranks"],con_ranks[[i]][,"SUCRAjags ranks"],floor(as.numeric(continuous_rm[[i]]["no. treatments"])/2))}
else {NA}),
sapply(1:length(bin_ranks), function(i) if(as.numeric(binary_rm[[i]]["no. treatments"])>5)
{averageoverlap(bin_ranks[[i]][,"SUCRA_ranks"],bin_ranks[[i]][,"SUCRAjags ranks"],floor(as.numeric(binary_rm[[i]]["no. treatments"])/2))}
else {NA}))
names(SUCRAvsSUCRAjags_AO) <- as.character(c(continuousIDs,binaryIDs))
SUCRAvsSUCRAjags_AO <- Filter(Negate(anyNA), SUCRAvsSUCRAjags_AO)   ## exclude any NAs
head(SUCRAvsSUCRAjags_s)
head(SUCRAvsSUCRAjags_k)
head(SUCRAvsSUCRAjags_AP)
head(SUCRAvsSUCRAjags_AO)
sum(SUCRAvsSUCRAjags_s>0.9)/length(SUCRAvsSUCRAjags_s) # % of networks with spearman correlation >0.9
sum(SUCRAvsSUCRAjags_k>0.9)/length(SUCRAvsSUCRAjags_k) # % of networks with kendall correlation >0.9
sum(SUCRAvsSUCRAjags_AP>0.9)/length(SUCRAvsSUCRAjags_AP) # % of networks with Yilmaz AP correlation >0.9
sum(SUCRAvsSUCRAjags_AO>0.9)/length(SUCRAvsSUCRAjags_AO)# % of networks with AO >0.9
# store number of treatments in each network in a vector
ntreat <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["no. treatments"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["no. treatments"]))
names(ntreat) <- as.character(c(continuousIDs,binaryIDs))
head(ntreat)
# store sample sizes in each network in a vector
samplesizes <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["sample size"]),sapply(1:length(binary_rm), function(i) binary_rm[[i]]["sample size"]))
names(samplesizes) <- as.character(c(continuousIDs,binaryIDs))
head(samplesizes)
# sample size over num of treatments
samp_nt <- as.numeric(samplesizes)/as.numeric(ntreat)
names(samp_nt) <- as.character(c(continuousIDs,binaryIDs))
head(samp_nt)
# store relative range of precision for Avg TE in each network in a vector
AvgTEprec_range <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["Avg TE prec range"]), sapply(1:length(binary_rm), function(i) binary_rm[[i]]["Avg TE prec range"]))
# store average precision for Avg TE in each network in a vector
AvgTEprec_avg <- c(sapply(1:length(continuous_rm), function(i) continuous_rm[[i]]["Avg TE prec avg"]), sapply(1:length(binary_rm), function(i) binary_rm[[i]]["Avg TE prec avg"]))
names(AvgTEprec_range) <- as.character(c(continuousIDs,binaryIDs))
head(AvgTEprec_range)
names(AvgTEprec_avg) <- as.character(c(continuousIDs,binaryIDs))
head(AvgTEprec_avg)
### graphs to show relationship between correlations and networks measures (avg sample size, avg precision)
source("plots.R")
library(splines)
# plots of average sample size per treatment in a network and spearman/kendall correlations
pdf('plots_sampnt.pdf')
par(mfrow=c(2,4))
plot(log(samp_nt), pBVvsSUCRA_k,
xlab = "log of average sample size \n per treatment",
ylab = "Kendall tau pBV vs SUCRA")         # kendall correlation
lines(smooth.spline(log(samp_nt), pBVvsSUCRA_k, df = 3),lwd=2,col="purple")
plot(log(samp_nt), pBVvsSUCRA_s,
xlab = "log of average sample size \n per treatment",
ylab = "Spearman rho pBV vs SUCRA")         # spearman correlation
lines(smooth.spline(log(samp_nt), pBVvsSUCRA_s, df = 3),lwd=2,col="purple")
plot(log(samp_nt), SUCRAvsSUCRAjags_k,
xlab = "log of average sample size \n per treatment",
ylab = "Kendall tau SUCRA vs Bayesian SUCRA")   # kendall correlation
lines(smooth.spline(log(samp_nt), SUCRAvsSUCRAjags_k, df = 3),lwd=2,col="purple")
plot(log(samp_nt), SUCRAvsSUCRAjags_s,
xlab = "log of average sample size \n per treatment",
ylab = "Spearman rho SUCRA vs Bayesian SUCRA")   # spearman correlation
lines(smooth.spline(log(samp_nt), SUCRAvsSUCRAjags_s, df = 3),lwd=2,col="purple")
plot(log(samp_nt), SUCRAvsAvgTE_k,
xlab = "log of average sample size \n per treatment",
ylab = "Kendall tau SUCRA vs average treatment effect")   # kendall correlation
lines(smooth.spline(log(samp_nt), SUCRAvsAvgTE_k, df = 3),lwd=2,col="purple")
plot(log(samp_nt), SUCRAvsAvgTE_s,
xlab = "log of average sample size \n per treatment",
ylab = "Spearman rho SUCRA vs average treatment effect")   # spearman correlation
lines(smooth.spline(log(samp_nt), SUCRAvsAvgTE_s, df = 3),lwd=2,col="purple")
plot(log(samp_nt), pBVvsAvgTE_k,
xlab = "log of average sample size \n per treatment",
ylab = "Kendall tau pBV vs average treatment effect")   # kendall correlation
lines(smooth.spline(log(samp_nt), pBVvsAvgTE_k, df = 3),lwd=2,col="purple")
plot(log(samp_nt), pBVvsAvgTE_s,
xlab = "log of average sample size \n per treatment",
ylab = "Spearman rho pBV vs average treatment effect")   # spearman correlation
lines(smooth.spline(log(samp_nt), pBVvsAvgTE_s, df = 3),lwd=2,col="purple")
dev.off()
# plots of average sample size per treatment in a network and Yilmaz AP/average overlap
pdf('plots_sampnt_AP&AO.pdf')
par(mfrow=c(2,4))
plot(log(samp_nt), pBVvsSUCRA_AP,
xlab = "log of average sample size \n per treatment",
ylab = "Yilmaz tauAP pBV vs SUCRA")         # Yilmaz tauAP
lines(smooth.spline(log(samp_nt), pBVvsSUCRA_AP, df = 3),lwd=2,col="purple")
plot(log(samp_nt[match(names(pBVvsSUCRA_AO), names(samp_nt))]), pBVvsSUCRA_AO,
xlab = "log of average sample size \n per treatment",
ylab = "Averge Overlap pBV vs SUCRA")         # Averge Overlap
lines(smooth.spline(log(samp_nt[match(names(pBVvsSUCRA_AO), names(samp_nt))]), pBVvsSUCRA_AO, df = 3),lwd=2,col="purple")
plot(log(samp_nt), SUCRAvsSUCRAjags_AP,
xlab = "log of average sample size \n per treatment",
ylab = "Yilmaz tauAP SUCRA vs Bayesian SUCRA")   # Yilmaz tauAP
lines(smooth.spline(log(samp_nt), SUCRAvsSUCRAjags_AP, df = 3),lwd=2,col="purple")
plot(log(samp_nt[match(names(SUCRAvsSUCRAjags_AO), names(samp_nt))]), SUCRAvsSUCRAjags_AO,
xlab = "log of average sample size \n per treatment",
ylab = "Averge Overlap SUCRA vs Bayesian SUCRA")   # Averge Overlap
lines(smooth.spline(log(samp_nt[match(names(SUCRAvsSUCRAjags_AO), names(samp_nt))]), SUCRAvsSUCRAjags_AO, df = 3),lwd=2,col="purple")
plot(log(samp_nt), SUCRAvsAvgTE_AP,
xlab = "log of average sample size \n per treatment",
ylab = "Yilmaz tauAP SUCRA vs average treatment effect")   # Yilmaz tauAP
lines(smooth.spline(log(samp_nt), SUCRAvsAvgTE_AP, df = 3),lwd=2,col="purple")
plot(log(samp_nt[match(names(SUCRAvsAvgTE_AO), names(samp_nt))]), SUCRAvsAvgTE_AO,
xlab = "log of average sample size \n per treatment",
ylab = "Averge Overlap SUCRA vs average treatment effect")   # Averge Overlap
lines(smooth.spline(log(samp_nt[match(names(SUCRAvsAvgTE_AO), names(samp_nt))]), SUCRAvsAvgTE_AO, df = 3),lwd=2,col="purple")
plot(log(samp_nt), pBVvsAvgTE_AP,
xlab = "log of average sample size \n per treatment",
ylab = "Yilmaz tauAP pBV vs average treatment effect")   # Yilmaz tauAP
lines(smooth.spline(log(samp_nt), pBVvsAvgTE_AP, df = 3),lwd=2,col="purple")
plot(log(samp_nt[match(names(pBVvsAvgTE_AO), names(samp_nt))]), pBVvsAvgTE_AO,
xlab = "log of average sample size \n per treatment",
ylab = "Averge Overlap pBV vs average treatment effect")   # Averge Overlap
lines(smooth.spline(log(samp_nt[match(names(pBVvsAvgTE_AO), names(samp_nt))]), pBVvsAvgTE_AO, df = 3),lwd=2,col="purple")
dev.off()
# plots of relative range precision and correlations
pdf('plots_prec_range.pdf')
par(mfrow=c(2,4))
plot(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_k,
xlab = "log of log of inverse \n of precision relative range",
ylab = "Kendall tau SUCRA vs average treatment effect")   # kendall correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_k, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s,
xlab = "log of log of inverse \n of precision relative range",
ylab = "Spearman rho SUCRA vs average treatment effect")   # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_s, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_k,
xlab = "log of log of inverse \n of precision relative range",
ylab = "Kendall tau pBV vs average treatment effect")     # kendall correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_k, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s,
xlab = "log of log of inverse \n of precision relative range",
ylab = "Spearman rho pBV vs average treatment effect")     # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_s, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_k,
xlab = "log of log of inverse \n of precision relative range",
ylab = "Kendall tau pBV vs SUCRA")         # kendall correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_k, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s,
xlab = "log of log of inverse \n of precision relative range",
ylab = "Spearman rho pBV vs SUCRA")         # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_s, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsSUCRAjags_k,
xlab = "log of log of inverse \n of precision relative range",
ylab = "Kendall tau SUCRA vs Bayesian SUCRA")   # kendall correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsSUCRAjags_k, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsSUCRAjags_s,
xlab = "log of log of inverse \n of precision relative range",
ylab = "Spearman rho SUCRA vs Bayesian SUCRA")   # spearman correlation
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsSUCRAjags_s, df = 3),lwd=2,col="purple")
dev.off()
# plots of relative range precision and Yilmaz AP/average overlap
pdf('plots_prec_range_AP&AO.pdf')
par(mfrow=c(2,4))
plot(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_AP,
xlab = "log of log of inverse \n of precision relative range",
ylab = "Yilmaz tauAP SUCRA vs average treatment effect")   # Yilmaz tauAP
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsAvgTE_AP, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))), SUCRAvsAvgTE_AO,
xlab = "log of log of inverse \n of precision relative range",
ylab = "Average overlap SUCRA vs average treatment effect")   # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_range))]))),
SUCRAvsAvgTE_AO, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_AP,
xlab = "log of log of inverse \n of precision relative range",
ylab = "Yilmaz tauAP pBV vs average treatment effect")     # Yilmaz tauAP
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsAvgTE_AP, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))), pBVvsAvgTE_AO,
xlab = "log of log of inverse \n of precision relative range",
ylab = "Average overlap pBV vs average treatment effect")     # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsAvgTE_AO), names(AvgTEprec_range))]))),
pBVvsAvgTE_AO, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_AP,
xlab = "log of log of inverse \n of precision relative range",
ylab = "Yilmaz tauAP pBV vs SUCRA")         # Yilmaz tauAP
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), pBVvsSUCRA_AP, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))), pBVvsSUCRA_AO,
xlab = "log of log of inverse \n of precision relative range",
ylab = "Average overlap pBV vs SUCRA")         # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(pBVvsSUCRA_AO), names(AvgTEprec_range))]))),
pBVvsSUCRA_AO, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsSUCRAjags_AP,
xlab = "log of log of inverse \n of precision relative range",
ylab = "Yilmaz tauAP SUCRA vs Bayesian SUCRA")   # Yilmaz tauAP
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range))), SUCRAvsSUCRAjags_AP, df = 3),lwd=2,col="purple")
plot(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsSUCRAjags_AO), names(AvgTEprec_range))]))), SUCRAvsSUCRAjags_AO,
xlab = "log of log of inverse \n of precision relative range",
ylab = "Average overlap SUCRA vs Bayesian SUCRA")   # Average Overlap
lines(smooth.spline(log(log(1/as.numeric(AvgTEprec_range[match(names(SUCRAvsSUCRAjags_AO), names(AvgTEprec_range))]))),
SUCRAvsSUCRAjags_AO, df = 3),lwd=2,col="purple")
dev.off()
# plots of average precision and correlations
pdf('plots_prec_avg.pdf')
par(mfrow=c(2,4))
plot(log(as.numeric(AvgTEprec_avg)), SUCRAvsAvgTE_k,
xlab = "log of average precision",
ylab = "Kendall tau SUCRA vs average treatment effect")   # kendall correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), SUCRAvsAvgTE_k, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), SUCRAvsAvgTE_s,
xlab = "log of average precision",
ylab = "Spearman rho SUCRA vs average treatment effect")   # spearman correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), SUCRAvsAvgTE_s, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), pBVvsAvgTE_k,
xlab = "log of average precision",
ylab = "Kendall tau pBV vs average treatment effect")     # kendall correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), pBVvsAvgTE_k, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), pBVvsAvgTE_s,
xlab = "log of average precision",
ylab = "Spearman rho pBV vs average treatment effect")     # spearman correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), pBVvsAvgTE_s, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), pBVvsSUCRA_k,
xlab = "log of average precision",
ylab = "Kendall tau pBV vs SUCRA")         # kendall correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), pBVvsSUCRA_k, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), pBVvsSUCRA_s,
xlab = "log of average precision",
ylab = "Spearman rho pBV vs SUCRA")         # spearman correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), pBVvsSUCRA_s, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), SUCRAvsSUCRAjags_k,
xlab = "log of average precision",
ylab = "Kendall tau SUCRA vs Bayesian SUCRA")   # kendall correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), SUCRAvsSUCRAjags_k, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), SUCRAvsSUCRAjags_s,
xlab = "log of average precision",
ylab = "Spearman rho SUCRA vs Bayesian SUCRA")   # spearman correlation
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), SUCRAvsSUCRAjags_s, df = 3),lwd=2,col="purple")
dev.off()
# plots of average precision and Yilmaz AP/average overlap
pdf('plots_prec_avg_AP&AO.pdf')
par(mfrow=c(2,4))
plot(log(as.numeric(AvgTEprec_avg)), SUCRAvsAvgTE_AP,
xlab = "log of average precision",
ylab = "Yilmaz tauAP SUCRA vs average treatment effect")   # Yilmaz tauAP
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), SUCRAvsAvgTE_AP, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_avg))])), SUCRAvsAvgTE_AO,
xlab = "log of average precision",
ylab = "Average overlap SUCRA vs average treatment effect")   # Average Overlap
lines(smooth.spline(log(as.numeric(AvgTEprec_avg[match(names(SUCRAvsAvgTE_AO), names(AvgTEprec_avg))])),
SUCRAvsAvgTE_AO, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), pBVvsAvgTE_AP,
xlab = "log of average precision",
ylab = "Yilmaz tauAP pBV vs average treatment effect")      # Yilmaz tauAP
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), pBVvsAvgTE_AP, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg[match(names(pBVvsAvgTE_AO), names(AvgTEprec_avg))])), pBVvsAvgTE_AO,
xlab = "log of average precision",
ylab = "Average overlap pBV vs average treatment effect")    # Average Overlap
lines(smooth.spline(log(as.numeric(AvgTEprec_avg[match(names(pBVvsAvgTE_AO), names(AvgTEprec_avg))])),
pBVvsAvgTE_AO, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), pBVvsSUCRA_AP,
xlab = "log of average precision",
ylab = "Yilmaz tauAP pBV vs SUCRA")          # Yilmaz tauAP
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), pBVvsSUCRA_AP, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg[match(names(pBVvsSUCRA_AO), names(AvgTEprec_avg))])), pBVvsSUCRA_AO,
xlab = "log of average precision",
ylab = "Average overlap pBV vs SUCRA")         # Average Overlap
lines(smooth.spline(log(as.numeric(AvgTEprec_avg[match(names(pBVvsSUCRA_AO), names(AvgTEprec_avg))])),
pBVvsSUCRA_AO, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg)), SUCRAvsSUCRAjags_AP,
xlab = "log of average precision",
ylab = "Yilmaz tauAP SUCRA vs Bayesian SUCRA")    # Yilmaz tauAP
lines(smooth.spline(log(as.numeric(AvgTEprec_avg)), SUCRAvsSUCRAjags_AP, df = 3),lwd=2,col="purple")
plot(log(as.numeric(AvgTEprec_avg[match(names(SUCRAvsSUCRAjags_AO), names(AvgTEprec_avg))])), SUCRAvsSUCRAjags_AO,
xlab = "log of average precision",
ylab = "Average overlap SUCRA vs Bayesian SUCRA")   # Average Overlap
lines(smooth.spline(log(as.numeric(AvgTEprec_avg[match(names(SUCRAvsSUCRAjags_AO), names(AvgTEprec_avg))])),
SUCRAvsSUCRAjags_AO, df = 3),lwd=2,col="purple")
dev.off()
readByID(479574)
nmadb_used = nmadb[nmadb$Verified=="True" & nmadb$Format!="iv" & (nmadb$Type.of.Outcome.=="Binary" | nmadb$Type.of.Outcome.=="Continuous"),]
View(nmadb_used)
nmadb_used <- nmadb_used[,-grep("Country..choice",colnames(nmadb_used))]
View(nmadb_used)
readByID(479622)
readByID(479629)
readByID(479652)
readByID(479816)
readByID(479993)
readByID(480039)
readByID(480655)
readByID(480695)
readByID(480804)
readByID(480851)
readByID(481009)
readByID(481118)
knitr::opts_chunk$set(echo = TRUE, fig.width = 8, fig.height = 3)
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
library(netmeta)
library(meta)
library(metafor)
library(readxl)
#get the data and select them
DATA <- read_excel("~/Virginia/NMA insomnia/Insomnia/MyrtoIncludedAllOutcomesClean27.6dVirgiRenamedInterventions.xlsx", na = "NA")
#prepare the data
DATApairs=pairwise(treat=Drug_name,mean=SleepTimeTotalScaleMean,sd=SleepTimeTotalScaleSD,n=SleepTimeTotalScaleParticipants, data=DATA, studlab = Final_ID_all)
netconnection(treat1,treat2,studlab,data=DATApairs,warn = T)
#check p-value availability for paired t-test for crossover studies with both phases used
DATApairs[DATApairs$Crossoverstudy==1 & DATApairs$`crossover, not first phase used`==1,c("studlab","tst_PorF-value","tst_p=0, f=1")]
# use threshold value for those with p-value <0.001
DATApairs[DATApairs$studlab==185, "tst_PorF-value"] <- 0.00099
#now calculate adjusted SE for remaining crossover studies
DATApairs$tvalue <- qt(as.numeric(DATApairs$`tst_PorF-value`)/2, df=DATApairs$n1-1, lower.tail = F)
DATApairs$SDd <- abs((DATApairs$mean2-DATApairs$mean1)/DATApairs$tvalue*sqrt(DATApairs$n1))
DATApairs$rho <- (DATApairs$sd1^2 + DATApairs$sd2^2 - DATApairs$SDd^2)/(2*DATApairs$sd1*DATApairs$sd2)
DATApairs[DATApairs$Crossoverstudy==1 & DATApairs$`crossover, not first phase used`==1,"seTE"] <- sqrt((1/DATApairs$n1+(DATApairs$TE^2)/(2*DATApairs$n1))*(2-2*DATApairs$rho))[DATApairs$Crossoverstudy==1 & DATApairs$`crossover, not first phase used`==1]
View(DATApairs)
paste(DATApairs$treat1,DATApairs$treat2)
paste(DATApairs$treat1,"VS",DATApairs$treat2)
DATApairs$comparison <- paste(DATApairs$treat1,"VS",DATApairs$treat2)
View(DATApairs)
metagen(TE, seTE, studlab=Study_name, data = DATApairs, byvar = comparison)
forest(metagen(TE, seTE, studlab=Study_name, data = DATApairs, byvar = comparison))
metagen(TE, seTE, studlab=Study_name, data = DATApairs, byvar = comparison, tau.common = T)
metagen(TE, seTE, studlab=Study_name, data = DATApairs, byvar = comparison, tau.common = TRUE)
metagen(TE, seTE, studlab=Study_name, data = DATApairs, byvar = comparison, nototal )
forest(metagen(TE, seTE, studlab=Study_name, data = DATApairs, byvar = comparison), fig.height = 15)
pdf('forest_TSTma.pdf')
forest(metagen(TE, seTE, studlab=Study_name, data = DATApairs, byvar = comparison), fig.height = 15)
dev.off()
forest(metagen(TE, seTE, studlab=Study_name, data = DATApairs, byvar = comparison), fig.height = 15, fig.width=8)
forest(metagen(TE, seTE, studlab=Study_name, data = DATApairs, byvar = comparison), fig.height = 20, fig.width=8)
par(mar=c(1,1,1,1,))
par(mar=c(1,1,1,1))
forest(metagen(TE, seTE, studlab=Study_name, data = DATApairs, byvar = comparison))
forest(metagen(TE, seTE, studlab=Study_name, data = DATApairs, byvar = comparison, fontsize=.5))
forest(metagen(TE, seTE, studlab=Study_name, data = DATApairs, byvar = comparison, fontsize=5))
forest(metagen(TE, seTE, studlab=Study_name, data = DATApairs, byvar = comparison), fontsize = 0.5)
forest(metagen(TE, seTE, studlab=Study_name, data = DATApairs, byvar = comparison), fontsize = 5)
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
library(netmeta)
library(meta)
library(metafor)
library(readxl)
#get the data and select them
DATA <- read_excel("~/Virginia/NMA insomnia/Insomnia/MyrtoIncludedAllOutcomesClean27.6dVirgiRenamedInterventions.xlsx", na = "NA")
#prepare the data
DATApairs=pairwise(treat=Drug_name,mean=SleepQualityScaleMean,sd=SleepQualityScaleSD,n=SleepQualityScaleParticipants, data=DATA, studlab = Final_ID_all, sm= "SMD")
#run NMA and create an object called EFF for efficacy   ### gives error because consists of 5 separate sub-networks so run netconnection first
netconnection(treat1,treat2,studlab,data=DATApairs,warn = T)
#remove rows for studies disconnected from main network
DPs <- subset(DATApairs, treat1!="BBT I" & treat1!="auricular acupuncture")
DPs <- DPs[-grep("LAT|MAT|acupressure|waitlist|therapeutic|hygiene|juice",DPs$treat2),]
View(DPs)
DPs <- DPs[DPs$Included==1,]
#prepare the data
DATApairs=pairwise(treat=Drug_name,mean=SleepQualityScaleMean,sd=SleepQualityScaleSD,n=SleepQualityScaleParticipants, data=DATA, studlab = Final_ID_all, sm= "SMD")
#remove rows for studies disconnected from main network
DPs <- subset(DATApairs, treat1!="BBT I" & treat1!="auricular acupuncture")
DPs <- DPs[-grep("LAT|MAT|acupressure|waitlist|therapeutic|hygiene|juice",DPs$treat2),]
DPs$Included
knitr::opts_chunk$set(echo = TRUE)
#get the data and select them
DATA <- read_excel("~/Virginia/NMA insomnia/Insomnia/MyrtoIncludedAllOutcomesClean27.6dVirgiRenamedInterventions.xlsx", na = "NA")
#prepare the data
DATApairs=pairwise(treat=Drug_name,mean=SleepTimeTotalScaleMean,sd=SleepTimeTotalScaleSD,n=SleepTimeTotalScaleParticipants, data=DATA, studlab = Final_ID_all, sm= "SMD")
#run NMA and create an object called EFF for efficacy   ### gives error because consists of 5 separate sub-networks so run netconnection first
netconnection(treat1,treat2,studlab,data=DATApairs,warn = T)
#run NMA and create an object called EFF for efficacy   ### gives error because consists of 5 separate sub-networks so run netconnection first
netconnection(treat1,treat2,studlab,data=DATApairs,warn = T)
#remove rows for studies disconnected from main network
DPs <- DATApairs[-grep("LAT|MAT|BBT I|midazolam|hygiene|juice",DATApairs$treat1),]
#remove rows for studies disconnected from main network
DPs <- DATApairs[-grep("LAT|MAT|BBT I|midazolam|hygiene|juice",DATApairs$treat1),]
DPs$Included
DPs <- DPs[DPs$Included==1,]
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,c("studlab","tst_PorF-value","tst_p=0, f=1")]
# use threshold value for those with p-value <0.001
DPs[DPs$studlab==185, "tst_PorF-value"] <- 0.00099
#now calculate adjusted SE for remaining crossover studies
DPs$tvalue <- qt(as.numeric(DPs$`tst_PorF-value`)/2, df=DPs$n1-1, lower.tail = F)
DPs$SDd <- abs((DPs$mean2-DPs$mean1)/DPs$tvalue*sqrt(DPs$n1))
DPs$rho <- (DPs$sd1^2 + DPs$sd2^2 - DPs$SDd^2)/(2*DPs$sd1*DPs$sd2)
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,"seTE"] <- sqrt((1/DPs$n1+(DPs$TE^2)/(2*DPs$n1))*(2-2*DPs$rho))[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1]
#   EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.05, details.chkmultiarm = T)
### gives error: Problems in multi-arm studies! Studies with negative treatment   arm variance: '18', '185'
# assign other correlation value to study 18 and 185 based on other studies
DPs[,c("studlab","rho")]
DPs[DPs$studlab==18|DPs$studlab==185,"rho"] <- 0.9
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,"seTE"] <- sqrt((1/DPs$n1+(DPs$TE^2)/(2*DPs$n1))*(2-2*DPs$rho))[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1]
TST<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="MD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.05)
TST
#network plot
netgraph(TST, plastic=F, thickness="number.of.studies", multiarm = F, points=T, col=1, number.of.studies=T)
#prepare the data
DATApairs=pairwise(treat=Drug_name,mean=SleepTimeTotalScaleMean,sd=SleepTimeTotalScaleSD,n=SleepTimeTotalScaleParticipants, data=DATA, studlab = Final_ID_all, sm= "MD")
#run NMA and create an object called EFF for efficacy   ### gives error because consists of 5 separate sub-networks so run netconnection first
netconnection(treat1,treat2,studlab,data=DATApairs,warn = T)
#prepare the data
DATApairs=pairwise(treat=Drug_name,mean=SleepTimeTotalScaleMean,sd=SleepTimeTotalScaleSD,n=SleepTimeTotalScaleParticipants, data=DATA, studlab = Final_ID_all, sm= "MD")
#run NMA and create an object called EFF for efficacy   ### gives error because consists of 5 separate sub-networks so run netconnection first
netconnection(treat1,treat2,studlab,data=DATApairs,warn = T)
#remove rows for studies disconnected from main network
DPs <- DATApairs[-grep("LAT|MAT|BBT I|midazolam|hygiene|juice",DATApairs$treat1),]
# remove studies with "special patients" that should not be included in main analysis
DPs <- DPs[DPs$Included==1,]
#check p-value availability for paired t-test for crossover studies with both phases used
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,c("studlab","tst_PorF-value","tst_p=0, f=1")]
# use threshold value for those with p-value <0.001
DPs[DPs$studlab==185, "tst_PorF-value"] <- 0.00099
#now calculate adjusted SE for remaining crossover studies
DPs$tvalue <- qt(as.numeric(DPs$`tst_PorF-value`)/2, df=DPs$n1-1, lower.tail = F)
DPs$SDd <- abs((DPs$mean2-DPs$mean1)/DPs$tvalue*sqrt(DPs$n1))
DPs$rho <- (DPs$sd1^2 + DPs$sd2^2 - DPs$SDd^2)/(2*DPs$sd1*DPs$sd2)
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,"seTE"] <- sqrt((1/DPs$n1+(DPs$TE^2)/(2*DPs$n1))*(2-2*DPs$rho))[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1]
#   EFF<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="SMD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.05, details.chkmultiarm = T)
### gives error: Problems in multi-arm studies! Studies with negative treatment   arm variance: '18', '185'
# assign other correlation value to study 18 and 185 based on other studies
DPs[,c("studlab","rho")]
DPs[DPs$studlab==18|DPs$studlab==185,"rho"] <- 0.9
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,"seTE"] <- sqrt((1/DPs$n1+(DPs$TE^2)/(2*DPs$n1))*(2-2*DPs$rho))[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1]
TST<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="MD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.05)
View(DPs)
#DPs$SDd <- abs((DPs$mean2-DPs$mean1)/DPs$tvalue*sqrt(DPs$n1))
#DPs$rho <- (DPs$sd1^2 + DPs$sd2^2 - DPs$SDd^2)/(2*DPs$sd1*DPs$sd2)
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,"seTE"] <- DPs$TE/DPs$tvalue[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1]
#DPs$SDd <- abs((DPs$mean2-DPs$mean1)/DPs$tvalue*sqrt(DPs$n1))
#DPs$rho <- (DPs$sd1^2 + DPs$sd2^2 - DPs$SDd^2)/(2*DPs$sd1*DPs$sd2)
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,"seTE"] <- DPs$TE/DPs$tvalue
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,"seTE"]
#DPs$SDd <- abs((DPs$mean2-DPs$mean1)/DPs$tvalue*sqrt(DPs$n1))
#DPs$rho <- (DPs$sd1^2 + DPs$sd2^2 - DPs$SDd^2)/(2*DPs$sd1*DPs$sd2)
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,"seTE"] <- DPs$TE/DPs$tvalue[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1]
#DPs$SDd <- abs((DPs$mean2-DPs$mean1)/DPs$tvalue*sqrt(DPs$n1))
#DPs$rho <- (DPs$sd1^2 + DPs$sd2^2 - DPs$SDd^2)/(2*DPs$sd1*DPs$sd2)
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,"seTE"] <- (DPs$TE/DPs$tvalue)[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1]
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,"seTE"]
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,"tvalue"]
#DPs$SDd <- abs((DPs$mean2-DPs$mean1)/DPs$tvalue*sqrt(DPs$n1))
#DPs$rho <- (DPs$sd1^2 + DPs$sd2^2 - DPs$SDd^2)/(2*DPs$sd1*DPs$sd2)
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,"seTE"] <- (abs(DPs$TE)/DPs$tvalue)[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1]
DPs[DPs$Crossoverstudy==1 & DPs$`crossover, not first phase used`==1,"seTE"]
TST<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="MD",r="pbo",comb.fixed =F, comb.random = T)
TST<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="MD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.05)
TST<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="MD",r="pbo",comb.fixed =F, comb.random = T, details.chkmultiarm=TRUE)
TST<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="MD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.5)
TST<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="MD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.9)
TST<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="MD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 10)
TST<-netmeta(TE,seTE,treat1,treat2,studlab,data=DPs,  sm="MD",r="pbo",comb.fixed =F, comb.random = T, tol.multiarm = 0.01)
